name: Test and Propose Release

on:
  push:
    branches:
      - dev

jobs:
  test-and-create-pr:
    runs-on: ubuntu-latest
    env:
      DJANGO_SECRET_KEY: test-secret-key
      BACKEND_DOMAIN: localhost
      BACKEND_URL: http://localhost
      BACKEND_SLUG: dev
      DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
      DATABASE_URL: sqlite:///test_db.sqlite3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: pip install uv

      - name: Sync dependencies
        run: uv sync --frozen --no-install-project

      - name: Run Django tests
        run: uv run python backend/manage.py test

      - name: Create or update PR into main
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const head = `${owner}:dev`;
            const base = 'main';

            const { data: existing } = await github.rest.pulls.list({
              owner,
              repo,
              head,
              base,
              state: 'open',
              per_page: 1,
            });

            if (existing.length > 0) {
              core.info(`PR already exists: #${existing[0].number}`);
              return;
            }

            const headCommit = context.payload.head_commit || {};
            const commitMessage = headCommit.message || context.sha;
            const title = `Sync dev to main - ${new Date().toISOString()}`;
            const body = [
              '## Summary',
              `- Automated PR to merge latest dev changes into main`,
              `- Commit: ${context.sha}`,
              `- Message: ${commitMessage}`,
              '',
              '## Automated Notice',
              'Tests succeeded in CI prior to opening this pull request.'
            ].join('\n');

            await github.rest.pulls.create({
              owner,
              repo,
              head: 'dev',
              base,
              title,
              body,
            });
